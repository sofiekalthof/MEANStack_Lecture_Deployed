{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;4CAGM;;yCACA;AACN,4BAA4B;AAC5B,yCAAyC;AAEzC,qBAAqB;AACrB,MAAM,MAAM;AAEZ,qCAAqC;AACrC,IAAI,GAAG,CAAC;AAER,gCAAgC;AAChC,IAAI,GAAG,CAAC,eAAQ,IAAI;AAEpB,wBAAwB;AACxB,iDAAiD;AACjD,MAAM,OAAO,KAAK,2BAA2B;AAC7C,MAAM,SAAS;AACf,MAAM,iBAAiB;AAEvB,6BAA6B;AAC7B,MAAM,QAAQ;AAGd,IAAI;AAEJ,uBAAuB;AACvB,qBAAqB;AACrB,uCAAuC;AACvC,IAAI,KAAK,CAAC,cAAc,GAAG,CAAC,OAAO,KAAK,MAAQ;IAC5C,IAAI,YAAY,EAAE;IAElB,YAAY,MAAM,aAAa,UAAU,CAAC,gBACjB,IAAI,GACJ,OAAO;IAEhC,IAAI,IAAI,CAAC;AACb;AAEA,iBAAiB;AACjB,IAAI,KAAK,CAAC,sBAAsB,GAAG,CAAC,OAAO,KAAK,MAAQ;IACpD,MAAM,KAAK,IAAI,MAAM,CAAC,EAAE;IACxB,MAAM,SAAS,MAAM,aAAa,UAAU,CAAC,gBACR,OAAO,CAAC;QAAC,KAAK,uCAAa;IAAG;IAEnE,IAAI,CAAC,QAAQ;QACX,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAC,OAAO;QAAgB;QAC7C;IACF,CAAC;IAED,IAAI,IAAI,CAAC;AACb;AAEA,wBAAwB;AACxB,IAAI,KAAK,CAAC,mBAAmB,IAAI,CAAC,OAAO,KAAK,MAAQ;IAClD,MAAM,MAAM,IAAI,IAAI;IACpB,MAAM,SAAS,MAAM,aAAa,UAAU,CAAC,gBACR,SAAS,CAAC;IAC/C,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;QAAE,KAAK,OAAO,UAAU;IAAC;AAChD;AAEF,oBAAoB;AACpB,IAAI,KAAK,CAAC,uBAAuB,GAAG,CAAC,OAAO,KAAK,MAAQ;IACrD,MAAM,KAAK,IAAI,MAAM,CAAC,EAAE;IACxB,MAAM,MAAM,IAAI,IAAI;IAEpB,gDAAgD;IAChD,IAAI,GAAG,GAAG,uCAAa;IAEvB,MAAM,SAAS,MAAM,aAAa,UAAU,CAAC,gBACR,SAAS,CAAC;QAAE,KAAK,uCAAa;IAAI,GAAG;QAAE,MAAM;IAAI;IAEtF,IAAI,OAAO,YAAY,IAAI,GAAG;QAC5B,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC,CAAC;QACtB;IACF,CAAC;IAED,IAAI,IAAI,CAAC,CAAC;AACZ;AAEA,kBAAkB;AACpB,IAAI,KAAK,CAAC,kBAAkB,MAAM,CAAC,OAAO,KAAK,MAAQ;IACnD,MAAM,KAAK,IAAI,MAAM,CAAC,EAAE;IAExB,uCAAuC;IACvC,MAAM,aAAa,UAAU,CAAC,gBACT,SAAS,CAAC;QAAE,KAAK,uCAAa;IAAI;IAEvD,IAAI,IAAI,CAAC,CAAC;AACZ;AAGF,uCAAuC;AACvC,IAAI,MAAM,CAAC,MAAM,WAAY;IACzB,QAAQ,GAAG,CAAC,kBAAkB,OAAO;AACvC;AAEF,sBAAsB;AACtB,sCAAY,OAAO,CAAC,OACjB,IAAI,CAAC,CAAA,SAAU;IACd,eAAe,OAAO,EAAE,CAAC;AAC3B,GACC,KAAK,CAAC,CAAA,MAAO;IACZ,QAAQ,GAAG,CAAC;AACd","sources":["server.js"],"sourcesContent":["const express = require(\"express\");\nconst proxy = require(\"express-http-proxy\");\nconst cors = require(\"cors\");\nconst MongoClient = require(\"mongodb\").MongoClient;\nconst ObjectId = require(\"mongodb\").ObjectId;\n// import Password interface\n// import { Password } from \"./password\";\n\n// Create Express app\nconst app = express();\n\n// Add CORS to all routes and methods\napp.use(cors());\n\n// Enable parsing of JSON bodies\napp.use(express.json());\n\n// Initialize parameters\n// const port = eval(\"process.env.PORT\") || 3600;\nconst port = eval(\"process.env.PASSWORD\") || 3600;\nconst dbName = \"mean-passwordManager\";\nconst collectionName = \"passwords\";\n\n// database connection string\nconst dbUrl = 'mongodb+srv://admin:xOuG5xzD7E4ZZCdF@mycluster.upxjjyn.mongodb.net/?retryWrites=true&w=majority'\n\n\nlet dbConnection;\n\n// Define server routes\n// List all passwords\n// TODO: Task - Write whole GET Request\napp.route(\"/passwords\").get(async (req, res) => {\n    let passwords = [];\n  \n    passwords = await dbConnection.collection(collectionName)\n                            .find()\n                            .toArray();\n\n    res.json(passwords);\n});\n\n// Get a password\napp.route(\"/password-edit/:id\").get(async (req, res) => {\n    const id = req.params.id;\n    const result = await dbConnection.collection(collectionName)\n                                        .findOne({_id: new ObjectId(id)});\n  \n    if (!result) {\n      res.status(404).json({error: \"Could not find\"});\n      return;\n    }\n  \n    res.json(result);\n});\n\n// Create a new password\napp.route(\"/passwords-edit\").post(async (req, res) => {\n    const doc = req.body;\n    const result = await dbConnection.collection(collectionName)\n                                        .insertOne(doc);\n    res.status(201).json({ _id: result.insertedId });\n  });\n\n// Update a password\napp.route(\"/passwords-edit/:id\").put(async (req, res) => {\n    const id = req.params.id;\n    const doc = req.body;\n\n    // make sure the id field is correct object type\n    doc._id = new ObjectId(id);\n\n    const result = await dbConnection.collection(collectionName)\n                                        .updateOne({ _id: new ObjectId(id) }, { $set: doc });\n  \n    if (result.matchedCount == 0) {\n      res.status(404).json({});\n      return;\n    }\n  \n    res.json({});\n  });\n\n  // Delete a person\napp.route(\"/passwords/:id\").delete(async (req, res) => {\n    const id = req.params.id;\n  \n    // TODO: Task - Write delete query only\n    await dbConnection.collection(collectionName)\n                        .deleteOne({ _id: new ObjectId(id) });\n  \n    res.json({});\n  });\n\n  \n// Start server and listen for requests\napp.listen(port, function () {\n    console.log(\"Listening on \" + port + \".\");\n  });\n\n// database connection\nMongoClient.connect(dbUrl)\n  .then(client => {\n    dbConnection = client.db(dbName)\n  })\n  .catch(err => {\n    console.log(err)\n  })"],"names":[],"version":3,"file":"index.js.map"}