{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../password-store.service\";\nimport * as i3 from \"@angular/forms\";\nexport class PasswordEditComponent {\n  constructor(route,\n  // Provides access to the current route\n  router,\n  // Used for navigation\n  passwordService // Service for managing passwords\n  ) {\n    this.route = route;\n    this.router = router;\n    this.passwordService = passwordService;\n    this.isSaving = false; // Indicates if the form is currently being saved\n  }\n\n  ngOnInit() {\n    const id = +this.route.snapshot.paramMap.get('id'); // Retrieves the 'id' parameter from the route\n    if (id !== 0) {\n      // Fetch the password details from the password service based on the ID\n      this.passwordService.getPasswordById(id).subscribe(password => {\n        this.password = password;\n        this.decryptedPassword = atob(password.encryptedPassword);\n      });\n    } else {\n      // Set default values for a new password\n      this.password = {\n        id: 0,\n        category: '',\n        app: '',\n        userName: '',\n        encryptedPassword: ''\n      };\n    }\n  }\n  save() {\n    // Check if all required fields are filled\n    if (!this.password.category || !this.password.app || !this.password.userName || !this.decryptedPassword) {\n      alert('Please enter all the fields!');\n      return;\n    }\n    this.isSaving = true; // Set saving flag to true\n    if (this.password.id === 0) {\n      // Add a new password\n      this.password.encryptedPassword = btoa(this.decryptedPassword); // Encrypt the password\n      this.passwordService.addPassword(this.password).subscribe(() => {\n        this.isSaving = false; // Set saving flag to false\n        this.goBack(); // Navigate back\n      });\n    } else {\n      // Update an existing password\n      if (this.decryptedPassword) {\n        this.password.encryptedPassword = btoa(this.decryptedPassword); // Encrypt the password if it exists\n      }\n\n      this.passwordService.updatePassword(this.password.id, this.password).subscribe(() => {\n        this.isSaving = false; // Set saving flag to false\n        this.goBack(); // Navigate back\n      });\n    }\n  }\n\n  goBack() {\n    this.router.navigate(['/password-manager']); // Navigate back to the password manager page\n  }\n\n  togglePasswordVisibility() {\n    // Toggle password visibility\n    const passwordField = document.getElementById('encryptedPassword');\n    const toggleButton = document.getElementById('togglePasswordVisibilityButton');\n    const toggleButtonIcon = toggleButton.querySelector('i');\n    if (toggleButtonIcon) {\n      if (passwordField.type === 'password') {\n        passwordField.type = 'text'; // Show the password\n        toggleButtonIcon.classList.remove('fa-eye');\n        toggleButtonIcon.classList.add('fa-eye-slash');\n      } else {\n        passwordField.type = 'password'; // Hide the password\n        toggleButtonIcon.classList.remove('fa-eye-slash');\n        toggleButtonIcon.classList.add('fa-eye');\n      }\n    }\n  }\n}\nPasswordEditComponent.ɵfac = function PasswordEditComponent_Factory(t) {\n  return new (t || PasswordEditComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.PasswordService));\n};\nPasswordEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PasswordEditComponent,\n  selectors: [[\"app-password-edit\"]],\n  decls: 23,\n  vars: 4,\n  consts: [[1, \"edit-card\"], [1, \"pass-form\"], [1, \"form-group\"], [\"for\", \"category\"], [\"type\", \"text\", \"id\", \"category\", \"name\", \"category\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"app\"], [\"type\", \"text\", \"id\", \"app\", \"name\", \"app\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"userName\"], [\"type\", \"text\", \"id\", \"userName\", \"name\", \"userName\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"encryptedPassword\"], [1, \"input-group\"], [\"type\", \"password\", \"id\", \"encryptedPassword\", \"name\", \"encryptedPassword\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"button\", \"id\", \"togglePasswordVisibilityButton\", 1, \"show-btn\", 3, \"click\"], [\"id\", \"togglePasswordVisibilityIcon\", 1, \"fas\", \"fa-eye\"], [1, \"save-btn\", 3, \"click\"]],\n  template: function PasswordEditComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"label\", 3);\n      i0.ɵɵtext(4, \"Category:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"input\", 4);\n      i0.ɵɵlistener(\"ngModelChange\", function PasswordEditComponent_Template_input_ngModelChange_5_listener($event) {\n        return ctx.password.category = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(6, \"div\", 2)(7, \"label\", 5);\n      i0.ɵɵtext(8, \"Application:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"input\", 6);\n      i0.ɵɵlistener(\"ngModelChange\", function PasswordEditComponent_Template_input_ngModelChange_9_listener($event) {\n        return ctx.password.app = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"div\", 2)(11, \"label\", 7);\n      i0.ɵɵtext(12, \"Username:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"input\", 8);\n      i0.ɵɵlistener(\"ngModelChange\", function PasswordEditComponent_Template_input_ngModelChange_13_listener($event) {\n        return ctx.password.userName = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(14, \"div\", 2)(15, \"label\", 9);\n      i0.ɵɵtext(16, \"Password:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"div\", 10)(18, \"input\", 11);\n      i0.ɵɵlistener(\"ngModelChange\", function PasswordEditComponent_Template_input_ngModelChange_18_listener($event) {\n        return ctx.decryptedPassword = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"button\", 12);\n      i0.ɵɵlistener(\"click\", function PasswordEditComponent_Template_button_click_19_listener() {\n        return ctx.togglePasswordVisibility();\n      });\n      i0.ɵɵelement(20, \"i\", 13);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"button\", 14);\n      i0.ɵɵlistener(\"click\", function PasswordEditComponent_Template_button_click_21_listener() {\n        return ctx.save();\n      });\n      i0.ɵɵtext(22, \"Save New Password\");\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.password.category);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.password.app);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.password.userName);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.decryptedPassword);\n    }\n  },\n  dependencies: [i3.DefaultValueAccessor, i3.NgControlStatus, i3.RequiredValidator, i3.NgModel],\n  styles: [\".pass-form[_ngcontent-%COMP%] {\\n    background-color: #e6e7efd0;\\n    color: #292727;\\n    padding: 30px 40px;\\n    margin-bottom: 30px;\\n    margin-top: 30px;\\n    border-radius: 10px;\\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\\n    border-collapse: collapse;\\n    font-size: 16px;\\n}\\n\\n.form-group[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\\n    font-weight: bold;\\n    display: block;\\n    margin-bottom: 5px;\\n}\\n\\n.form-control[_ngcontent-%COMP%] {\\n    width: 100%;\\n    padding: 10px;\\n    border-radius: 5px;\\n    border: 1px solid #6d81d8;\\n    font-size: 16px;\\n    margin-bottom: 20px;\\n    color: #292727;\\n    background-color: #ece9e9;\\n}\\n\\n.show-btn[_ngcontent-%COMP%] {\\n    background-color: #21897E;\\n    padding: 11px 20px;\\n    margin-right: 10px;\\n    color: #f1efec;\\n    border-radius: 5px;\\n    border: 1px solid #22463b;\\n    cursor: pointer;\\n    transition: background-color 0.2s ease-out;\\n    font-size: 18px;\\n}\\n\\n.show-btn[_ngcontent-%COMP%]:hover, .save-btn[_ngcontent-%COMP%]:hover {\\n    background-color: #23af85;\\n    box-shadow: 0px 2px 9px #8e8d91;\\n    transition-delay: 0.3s;\\n}\\n\\n.save-btn[_ngcontent-%COMP%] {\\n    background-color: #21897E;\\n    padding: 14px;\\n    color: #f1efec;\\n    border-radius: 5px;\\n    border: 1px solid #22463b;\\n    font-size: 14px;\\n    cursor: pointer;\\n    transition: background-color 0.2s ease-out;\\n}\\n\\n.edit-card[_ngcontent-%COMP%] {\\n    max-width: 1200px;\\n    margin: 0 auto;\\n    background-color: #d0d4e873;\\n    color: #f3f3f3;\\n    padding: 10px 40px;\\n    margin-bottom: 30px;\\n    margin-top: 30px;\\n    border-radius: 10px;\\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFzc3dvcmQtZWRpdC9wYXNzd29yZC1lZGl0LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSwyQkFBMkI7SUFDM0IsY0FBYztJQUNkLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsZ0JBQWdCO0lBQ2hCLG1CQUFtQjtJQUNuQix1Q0FBdUM7SUFDdkMseUJBQXlCO0lBQ3pCLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxpQkFBaUI7SUFDakIsY0FBYztJQUNkLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLFdBQVc7SUFDWCxhQUFhO0lBQ2Isa0JBQWtCO0lBQ2xCLHlCQUF5QjtJQUN6QixlQUFlO0lBQ2YsbUJBQW1CO0lBQ25CLGNBQWM7SUFDZCx5QkFBeUI7QUFDN0I7O0FBRUE7SUFDSSx5QkFBeUI7SUFDekIsa0JBQWtCO0lBQ2xCLGtCQUFrQjtJQUNsQixjQUFjO0lBQ2Qsa0JBQWtCO0lBQ2xCLHlCQUF5QjtJQUN6QixlQUFlO0lBQ2YsMENBQTBDO0lBQzFDLGVBQWU7QUFDbkI7O0FBRUE7O0lBRUkseUJBQXlCO0lBQ3pCLCtCQUErQjtJQUMvQixzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSx5QkFBeUI7SUFDekIsYUFBYTtJQUNiLGNBQWM7SUFDZCxrQkFBa0I7SUFDbEIseUJBQXlCO0lBQ3pCLGVBQWU7SUFDZixlQUFlO0lBQ2YsMENBQTBDO0FBQzlDOztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLGNBQWM7SUFDZCwyQkFBMkI7SUFDM0IsY0FBYztJQUNkLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsZ0JBQWdCO0lBQ2hCLG1CQUFtQjtJQUNuQix1Q0FBdUM7QUFDM0MiLCJzb3VyY2VzQ29udGVudCI6WyIucGFzcy1mb3JtIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTZlN2VmZDA7XG4gICAgY29sb3I6ICMyOTI3Mjc7XG4gICAgcGFkZGluZzogMzBweCA0MHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XG4gICAgbWFyZ2luLXRvcDogMzBweDtcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xuICAgIGJveC1zaGFkb3c6IDAgMCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4zKTtcbiAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICAgIGZvbnQtc2l6ZTogMTZweDtcbn1cblxuLmZvcm0tZ3JvdXAgbGFiZWwge1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIG1hcmdpbi1ib3R0b206IDVweDtcbn1cblxuLmZvcm0tY29udHJvbCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZzogMTBweDtcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYm9yZGVyOiAxcHggc29saWQgIzZkODFkODtcbiAgICBmb250LXNpemU6IDE2cHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgICBjb2xvcjogIzI5MjcyNztcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWNlOWU5O1xufVxuXG4uc2hvdy1idG4ge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMyMTg5N0U7XG4gICAgcGFkZGluZzogMTFweCAyMHB4O1xuICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgICBjb2xvcjogI2YxZWZlYztcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYm9yZGVyOiAxcHggc29saWQgIzIyNDYzYjtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAwLjJzIGVhc2Utb3V0O1xuICAgIGZvbnQtc2l6ZTogMThweDtcbn1cblxuLnNob3ctYnRuOmhvdmVyLFxuLnNhdmUtYnRuOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjNhZjg1O1xuICAgIGJveC1zaGFkb3c6IDBweCAycHggOXB4ICM4ZThkOTE7XG4gICAgdHJhbnNpdGlvbi1kZWxheTogMC4zcztcbn1cblxuLnNhdmUtYnRuIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjE4OTdFO1xuICAgIHBhZGRpbmc6IDE0cHg7XG4gICAgY29sb3I6ICNmMWVmZWM7XG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICMyMjQ2M2I7XG4gICAgZm9udC1zaXplOiAxNHB4O1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDAuMnMgZWFzZS1vdXQ7XG59XG5cbi5lZGl0LWNhcmQge1xuICAgIG1heC13aWR0aDogMTIwMHB4O1xuICAgIG1hcmdpbjogMCBhdXRvO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNkMGQ0ZTg3MztcbiAgICBjb2xvcjogI2YzZjNmMztcbiAgICBwYWRkaW5nOiAxMHB4IDQwcHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMzBweDtcbiAgICBtYXJnaW4tdG9wOiAzMHB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gICAgYm94LXNoYWRvdzogMCAwIDEwcHggcmdiYSgwLCAwLCAwLCAwLjMpO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["PasswordEditComponent","constructor","route","router","passwordService","ngOnInit","id","snapshot","paramMap","get","getPasswordById","subscribe","password","decryptedPassword","atob","encryptedPassword","category","app","userName","save","alert","isSaving","btoa","addPassword","goBack","updatePassword","navigate","togglePasswordVisibility","passwordField","document","getElementById","toggleButton","toggleButtonIcon","querySelector","type","classList","remove","add","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\tuk\\Documents\\Uni-Due\\SS23\\AWT\\MEAN-stack-presentation\\HandsOnSession\\password-manager\\frontend\\src\\app\\password-edit\\password-edit.component.ts","C:\\Users\\tuk\\Documents\\Uni-Due\\SS23\\AWT\\MEAN-stack-presentation\\HandsOnSession\\password-manager\\frontend\\src\\app\\password-edit\\password-edit.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Password } from '../password.interface';\nimport { PasswordService } from '../password-store.service';\n\n@Component({\n  selector: 'app-password-edit',\n  templateUrl: './password-edit.component.html',\n  styleUrls: ['./password-edit.component.css']\n})\nexport class PasswordEditComponent implements OnInit {\n\n  password!: Password; // Represents the password object\n  decryptedPassword!: string; // Stores the decrypted password value\n  isSaving = false; // Indicates if the form is currently being saved\n\n  constructor(\n    private route: ActivatedRoute, // Provides access to the current route\n    private router: Router, // Used for navigation\n    private passwordService: PasswordService // Service for managing passwords\n  ) { }\n\n  ngOnInit(): void {\n    const id = +this.route.snapshot.paramMap.get('id')!; // Retrieves the 'id' parameter from the route\n\n    if (id !== 0) {\n      // Fetch the password details from the password service based on the ID\n      this.passwordService.getPasswordById(id).subscribe((password) => {\n        this.password = password;\n        this.decryptedPassword = atob(password.encryptedPassword);\n      });\n    } else {\n      // Set default values for a new password\n      this.password = {\n        id: 0,\n        category: '',\n        app: '',\n        userName: '',\n        encryptedPassword: ''\n      };\n    }\n  }\n\n  save(): void {\n    // Check if all required fields are filled\n    if (!this.password.category || !this.password.app || !this.password.userName || !this.decryptedPassword) {\n      alert('Please enter all the fields!');\n      return;\n    }\n\n    this.isSaving = true; // Set saving flag to true\n\n    if (this.password.id === 0) {\n      // Add a new password\n      this.password.encryptedPassword = btoa(this.decryptedPassword); // Encrypt the password\n      this.passwordService.addPassword(this.password)\n        .subscribe(() => {\n          this.isSaving = false; // Set saving flag to false\n          this.goBack(); // Navigate back\n        });\n    } else {\n      // Update an existing password\n      if (this.decryptedPassword) {\n        this.password.encryptedPassword = btoa(this.decryptedPassword); // Encrypt the password if it exists\n      }\n      this.passwordService.updatePassword(this.password.id, this.password)\n        .subscribe(() => {\n          this.isSaving = false; // Set saving flag to false\n          this.goBack(); // Navigate back\n        });\n    }\n  }\n\n  goBack(): void {\n    this.router.navigate(['/password-manager']); // Navigate back to the password manager page\n  }\n\n  togglePasswordVisibility(): void {\n    // Toggle password visibility\n    const passwordField = document.getElementById('encryptedPassword') as HTMLInputElement;\n    const toggleButton = document.getElementById('togglePasswordVisibilityButton') as HTMLButtonElement;\n    const toggleButtonIcon = toggleButton.querySelector('i');\n\n    if (toggleButtonIcon) {\n      if (passwordField.type === 'password') {\n        passwordField.type = 'text'; // Show the password\n        toggleButtonIcon.classList.remove('fa-eye');\n        toggleButtonIcon.classList.add('fa-eye-slash');\n      } else {\n        passwordField.type = 'password'; // Hide the password\n        toggleButtonIcon.classList.remove('fa-eye-slash');\n        toggleButtonIcon.classList.add('fa-eye');\n      }\n    }\n  }\n}\n\n//Comment explanations:\n\n//The code represents the TypeScript component for the password edit page.\n//It imports necessary dependencies from Angular core and custom files.\n//The component class is defined with the necessary properties and methods.\n//The constructor injects the required dependencies for the component.\n//The ngOnInit() method is called when the component is initialized and retrieves the password details based on the route parameter 'id'.\n//The save() method is triggered when the user clicks the save button. It performs form validation and saves or updates the password accordingly.\n//The goBack() method is used to navigate back to the password manager page.\n//The togglePasswordVisibility() method toggles the visibility of the password field when the corresponding button is clicked.","<!-- Edit card container -->\n<div class=\"edit-card\">\n\n    <!-- Password form -->\n    <div class=\"pass-form\">\n\n        <!-- Category field -->\n        <div class=\"form-group\">\n            <label for=\"category\">Category:</label>\n            <input type=\"text\" class=\"form-control\" id=\"category\" name=\"category\" [(ngModel)]=\"password.category\" required>\n        </div>\n\n        <!-- Application field -->\n        <div class=\"form-group\">\n            <label for=\"app\">Application:</label>\n            <input type=\"text\" class=\"form-control\" id=\"app\" name=\"app\" [(ngModel)]=\"password.app\" required>\n        </div>\n\n        <!-- Username field -->\n        <div class=\"form-group\">\n            <label for=\"userName\">Username:</label>\n            <input type=\"text\" class=\"form-control\" id=\"userName\" name=\"userName\" [(ngModel)]=\"password.userName\" required>\n        </div>\n\n        <!-- Password field -->\n        <div class=\"form-group\">\n            <label for=\"encryptedPassword\">Password:</label>\n            <div class=\"input-group\">\n                <input type=\"password\" class=\"form-control\" id=\"encryptedPassword\" name=\"encryptedPassword\" [(ngModel)]=\"decryptedPassword\" required>\n\n                <!-- Toggle password visibility button -->\n                <button class=\"show-btn\" type=\"button\" id=\"togglePasswordVisibilityButton\" (click)=\"togglePasswordVisibility()\"><i id=\"togglePasswordVisibilityIcon\" class=\"fas fa-eye\"></i></button>\n\n                <!-- Save password button -->\n                <button (click)=\"save()\" class=\"save-btn\">Save New Password</button>\n            </div>\n        </div>\n    </div>\n</div>\n<!--Comment explanations:\n\n    The code represents an edit card containing a password form.\n    The form consists of several fields: category, application, username, and password.\n    Each field has a corresponding label and input element.\n    The ngModel directive is used for two-way data binding to associate the form inputs with the corresponding properties in the component.\n    The password field is of type \"password\" to mask the input.\n    There is a button to toggle password visibility when clicked.\n    A save button is provided to trigger the save() method when clicked.-->"]},"metadata":{},"sourceType":"module","externalDependencies":[]}