{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../password-store.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nconst _c0 = function (a1) {\n  return [\"/password-edit\", a1];\n};\nfunction PasswordManagerComponent_tr_19_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"td\")(12, \"button\", 3);\n    i0.ɵɵtext(13, \"Edit\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(14, \"td\")(15, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function PasswordManagerComponent_tr_19_Template_button_click_15_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const password_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.deletePassword(password_r1));\n    });\n    i0.ɵɵtext(16, \"Delete\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const password_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(password_r1.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(password_r1.category);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(password_r1.app);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(password_r1.userName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(password_r1.encryptedPassword);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(6, _c0, password_r1 == null ? null : password_r1.id));\n  }\n}\nexport class PasswordManagerComponent {\n  constructor(passwordService, router) {\n    this.passwordService = passwordService;\n    this.router = router;\n  }\n  ngOnInit() {\n    this.getPasswords(); // Retrieves the passwords when the component is initialized\n  }\n\n  getPasswords() {\n    // Retrieves all passwords from the password service\n    this.passwordService.getAllPasswords().subscribe(passwords => this.passwords = passwords);\n  }\n  deletePassword(password) {\n    if (confirm('Are you sure you want to delete this password?')) {\n      // Removes the password from the list\n      this.passwords = this.passwords.filter(p => p !== password);\n      // Calls the password service to delete the password\n      this.passwordService.deletePassword(password.id).subscribe();\n    }\n  }\n  editPassword(password) {\n    const link = ['/edit', password.id]; // Constructs the router link for editing the password\n    this.router.navigate(link); // Navigates to the password edit page\n  }\n}\n\nPasswordManagerComponent.ɵfac = function PasswordManagerComponent_Factory(t) {\n  return new (t || PasswordManagerComponent)(i0.ɵɵdirectiveInject(i1.PasswordService), i0.ɵɵdirectiveInject(i2.Router));\n};\nPasswordManagerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PasswordManagerComponent,\n  selectors: [[\"app-password-list\"]],\n  decls: 20,\n  vars: 1,\n  consts: [[1, \"table-card\"], [1, \"pass-table\"], [4, \"ngFor\", \"ngForOf\"], [1, \"edit-btn\", 3, \"routerLink\"], [1, \"delete-btn\", 3, \"click\"]],\n  template: function PasswordManagerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"table\", 1)(2, \"thead\")(3, \"tr\")(4, \"th\");\n      i0.ɵɵtext(5, \"#\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"th\");\n      i0.ɵɵtext(7, \"Category\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"th\");\n      i0.ɵɵtext(9, \"Application\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"th\");\n      i0.ɵɵtext(11, \"Username\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"th\");\n      i0.ɵɵtext(13, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"th\");\n      i0.ɵɵtext(15, \"Edit\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"th\");\n      i0.ɵɵtext(17, \"Delete\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(18, \"tbody\");\n      i0.ɵɵtemplate(19, PasswordManagerComponent_tr_19_Template, 17, 8, \"tr\", 2);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(19);\n      i0.ɵɵproperty(\"ngForOf\", ctx.passwords);\n    }\n  },\n  dependencies: [i3.NgForOf, i2.RouterLink],\n  styles: [\".table-card[_ngcontent-%COMP%] {\\n    max-width: 1200px;\\n    margin: 0 auto;\\n    background-color: #d0d4e873;\\n    color: #f3f3f3;\\n    padding: 10px 40px;\\n    margin-bottom: 30px;\\n    margin-top: 30px;\\n    border-radius: 10px;\\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\\n}\\n\\n.pass-table[_ngcontent-%COMP%] {\\n    width: 100%;\\n    background-color: #e6e7efd0;\\n    color: #292727;\\n    padding: 10px 40px;\\n    margin-bottom: 30px;\\n    margin-top: 30px;\\n    border-radius: 10px;\\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\\n    border-collapse: collapse;\\n    font-size: 16px;\\n}\\n\\n.pass-table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\\n    padding: 12px;\\n    text-align: left;\\n    border-top: 1px solid #6d81d8;\\n}\\n\\n.pass-table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\\n    padding: 12px;\\n    text-align: left;\\n}\\n\\n.pass-table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\\n    font-weight: bold;\\n}\\n\\n.edit-btn[_ngcontent-%COMP%], .delete-btn[_ngcontent-%COMP%] {\\n    background-color: #21897E;\\n    padding: 9px 17px;\\n    color: #f1efec;\\n    border-radius: 5px;\\n    border: 1px solid #22463b;\\n    cursor: pointer;\\n    transition: background-color 0.2s ease-out;\\n}\\n\\n.edit-btn[_ngcontent-%COMP%]:hover, .delete-btn[_ngcontent-%COMP%]:hover {\\n    background-color: #23af85;\\n    box-shadow: 0px 2px 9px #8e8d91;\\n    transition-delay: 0.3s;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFzc3dvcmQtbWFuYWdlci9wYXNzd29yZC1tYW5hZ2VyLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxpQkFBaUI7SUFDakIsY0FBYztJQUNkLDJCQUEyQjtJQUMzQixjQUFjO0lBQ2Qsa0JBQWtCO0lBQ2xCLG1CQUFtQjtJQUNuQixnQkFBZ0I7SUFDaEIsbUJBQW1CO0lBQ25CLHVDQUF1QztBQUMzQzs7QUFFQTtJQUNJLFdBQVc7SUFDWCwyQkFBMkI7SUFDM0IsY0FBYztJQUNkLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsZ0JBQWdCO0lBQ2hCLG1CQUFtQjtJQUNuQix1Q0FBdUM7SUFDdkMseUJBQXlCO0lBQ3pCLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsZ0JBQWdCO0lBQ2hCLDZCQUE2QjtBQUNqQzs7QUFFQTtJQUNJLGFBQWE7SUFDYixnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxpQkFBaUI7QUFDckI7O0FBRUE7O0lBRUkseUJBQXlCO0lBQ3pCLGlCQUFpQjtJQUNqQixjQUFjO0lBQ2Qsa0JBQWtCO0lBQ2xCLHlCQUF5QjtJQUN6QixlQUFlO0lBQ2YsMENBQTBDO0FBQzlDOztBQUVBOztJQUVJLHlCQUF5QjtJQUN6QiwrQkFBK0I7SUFDL0Isc0JBQXNCO0FBQzFCIiwic291cmNlc0NvbnRlbnQiOlsiLnRhYmxlLWNhcmQge1xuICAgIG1heC13aWR0aDogMTIwMHB4O1xuICAgIG1hcmdpbjogMCBhdXRvO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNkMGQ0ZTg3MztcbiAgICBjb2xvcjogI2YzZjNmMztcbiAgICBwYWRkaW5nOiAxMHB4IDQwcHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMzBweDtcbiAgICBtYXJnaW4tdG9wOiAzMHB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gICAgYm94LXNoYWRvdzogMCAwIDEwcHggcmdiYSgwLCAwLCAwLCAwLjMpO1xufVxuXG4ucGFzcy10YWJsZSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2U2ZTdlZmQwO1xuICAgIGNvbG9yOiAjMjkyNzI3O1xuICAgIHBhZGRpbmc6IDEwcHggNDBweDtcbiAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xuICAgIG1hcmdpbi10b3A6IDMwcHg7XG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgICBib3gtc2hhZG93OiAwIDAgMTBweCByZ2JhKDAsIDAsIDAsIDAuMyk7XG4gICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgICBmb250LXNpemU6IDE2cHg7XG59XG5cbi5wYXNzLXRhYmxlIHRkIHtcbiAgICBwYWRkaW5nOiAxMnB4O1xuICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICM2ZDgxZDg7XG59XG5cbi5wYXNzLXRhYmxlIHRoIHtcbiAgICBwYWRkaW5nOiAxMnB4O1xuICAgIHRleHQtYWxpZ246IGxlZnQ7XG59XG5cbi5wYXNzLXRhYmxlIHRoIHtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuLmVkaXQtYnRuLFxuLmRlbGV0ZS1idG4ge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMyMTg5N0U7XG4gICAgcGFkZGluZzogOXB4IDE3cHg7XG4gICAgY29sb3I6ICNmMWVmZWM7XG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICMyMjQ2M2I7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4ycyBlYXNlLW91dDtcbn1cblxuLmVkaXQtYnRuOmhvdmVyLFxuLmRlbGV0ZS1idG46aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMyM2FmODU7XG4gICAgYm94LXNoYWRvdzogMHB4IDJweCA5cHggIzhlOGQ5MTtcbiAgICB0cmFuc2l0aW9uLWRlbGF5OiAwLjNzO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":";;;;;;;;;;IAqBYA,0BAAuC;IAC/BA,YAAe;IAAAA,iBAAK;IAExBA,0BAAI;IAAAA,YAAqB;IAAAA,iBAAK;IAE9BA,0BAAI;IAAAA,YAAgB;IAAAA,iBAAK;IAEzBA,0BAAI;IAAAA,YAAqB;IAAAA,iBAAK;IAE9BA,0BAAI;IAAAA,aAA8B;IAAAA,iBAAK;IAEvCA,2BAAI;IACyEA,qBAAI;IAAAA,iBAAS;IAG1FA,2BAAI;IAC2BA;MAAA;MAAA;MAAA;MAAA,OAASA,iDAAwB;IAAA,EAAC;IAACA,uBAAM;IAAAA,iBAAS;;;;IAf7EA,eAAe;IAAfA,oCAAe;IAEfA,eAAqB;IAArBA,0CAAqB;IAErBA,eAAgB;IAAhBA,qCAAgB;IAEhBA,eAAqB;IAArBA,0CAAqB;IAErBA,eAA8B;IAA9BA,mDAA8B;IAGLA,eAA+C;IAA/CA,oGAA+C;;;ACvB5F,OAAM,MAAOC,wBAAwB;EAGnCC,YAAoBC,eAAgC,EAAUC,MAAc;IAAxD,oBAAe,GAAfD,eAAe;IAA2B,WAAM,GAANC,MAAM;EAAY;EAEhFC,QAAQ;IACN,IAAI,CAACC,YAAY,EAAE,CAAC,CAAC;EACvB;;EAEAA,YAAY;IACV;IACA,IAAI,CAACH,eAAe,CAACI,eAAe,EAAE,CACnCC,SAAS,CAACC,SAAS,IAAI,IAAI,CAACA,SAAS,GAAGA,SAAS,CAAC;EACvD;EAEAC,cAAc,CAACC,QAAkB;IAC/B,IAAIC,OAAO,CAAC,gDAAgD,CAAC,EAAE;MAC7D;MACA,IAAI,CAACH,SAAS,GAAG,IAAI,CAACA,SAAS,CAACI,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKH,QAAQ,CAAC;MAC3D;MACA,IAAI,CAACR,eAAe,CAACO,cAAc,CAACC,QAAQ,CAACI,EAAE,CAAC,CAACP,SAAS,EAAE;;EAEhE;EAEAQ,YAAY,CAACL,QAAkB;IAC7B,MAAMM,IAAI,GAAG,CAAC,OAAO,EAAEN,QAAQ,CAACI,EAAE,CAAC,CAAC,CAAC;IACrC,IAAI,CAACX,MAAM,CAACc,QAAQ,CAACD,IAAI,CAAC,CAAC,CAAC;EAC9B;;;AA3BWhB,wBAAwB;mBAAxBA,wBAAwB;AAAA;AAAxBA,wBAAwB;QAAxBA,wBAAwB;EAAAkB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDVrCvB,8BAAwB;MAIJA,iBAAC;MAAAA,iBAAK;MAEVA,0BAAI;MAAAA,wBAAQ;MAAAA,iBAAK;MAEjBA,0BAAI;MAAAA,2BAAW;MAAAA,iBAAK;MAEpBA,2BAAI;MAAAA,yBAAQ;MAAAA,iBAAK;MAEjBA,2BAAI;MAAAA,yBAAQ;MAAAA,iBAAK;MAEjBA,2BAAI;MAAAA,qBAAI;MAAAA,iBAAK;MAEbA,2BAAI;MAAAA,uBAAM;MAAAA,iBAAK;MAIvBA,8BAAO;MACHA,0EAmBK;MACTA,iBAAQ;;;MApBqBA,gBAAY;MAAZA,uCAAY","names":["i0","PasswordManagerComponent","constructor","passwordService","router","ngOnInit","getPasswords","getAllPasswords","subscribe","passwords","deletePassword","password","confirm","filter","p","id","editPassword","link","navigate","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\tuk\\Documents\\Uni-Due\\SS23\\AWT\\MEAN-stack-presentation\\HandsOnSession\\password-manager\\frontend\\src\\app\\password-manager\\password-manager.component.html","C:\\Users\\tuk\\Documents\\Uni-Due\\SS23\\AWT\\MEAN-stack-presentation\\HandsOnSession\\password-manager\\frontend\\src\\app\\password-manager\\password-manager.component.ts"],"sourcesContent":["<div class=\"table-card\">\n    <table class=\"pass-table\">\n        <thead>\n            <tr>\n                <th>#</th>\n                <!-- Column header for ID -->\n                <th>Category</th>\n                <!-- Column header for Category -->\n                <th>Application</th>\n                <!-- Column header for Application -->\n                <th>Username</th>\n                <!-- Column header for Username -->\n                <th>Password</th>\n                <!-- Column header for Password -->\n                <th>Edit</th>\n                <!-- Column header for Edit button -->\n                <th>Delete</th>\n                <!-- Column header for Delete button -->\n            </tr>\n        </thead>\n        <tbody>\n            <tr *ngFor=\"let password of passwords\">\n                <td>{{password.id}}</td>\n                <!-- Display ID value -->\n                <td>{{password.category}}</td>\n                <!-- Display Category value -->\n                <td>{{password.app}}</td>\n                <!-- Display Application value -->\n                <td>{{password.userName}}</td>\n                <!-- Display Username value -->\n                <td>{{password.encryptedPassword}}</td>\n                <!-- Display Password value -->\n                <td>\n                    <button class=\"edit-btn\" [routerLink]=\"['/password-edit', password?.id]\">Edit</button>\n                    <!-- Edit button with router link to password edit page -->\n                </td>\n                <td>\n                    <button class=\"delete-btn\" (click)=\"deletePassword(password)\">Delete</button>\n                    <!-- Delete button with click event to delete the password -->\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n<!--Comment explanations:\n\n    The code represents an HTML template for displaying a table of passwords.\n    The table structure consists of a table header (<thead>) and a table body (<tbody>).\n    The table header row defines the column headers for ID, Category, Application, Username, Password, Edit, and Delete.\n    The table body uses the *ngFor directive to iterate over each password in the passwords array and generate a table row (<tr>) for each password.\n    Within each table row, the corresponding password details are displayed in the respective table cells (<td>) using interpolation ({{ }}).\n    The \"Edit\" button is styled with the class \"edit-btn\" and has a router link ([routerLink]) that navigates to the password edit page, passing the password ID as a route parameter.\n    The \"Delete\" button is styled with the class \"delete-btn\" and triggers the deletePassword() method when clicked, passing the corresponding password object.\n    Overall, this code generates a dynamic table of passwords with editable and deletable rows.-->","import { Component, OnInit } from '@angular/core';\nimport { Password } from '../password.interface';\nimport { PasswordService } from '../password-store.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-password-list',\n  templateUrl: './password-manager.component.html',\n  styleUrls: ['./password-manager.component.css']\n})\nexport class PasswordManagerComponent implements OnInit {\n  passwords!: Password[]; // Represents the list of passwords\n\n  constructor(private passwordService: PasswordService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.getPasswords(); // Retrieves the passwords when the component is initialized\n  }\n\n  getPasswords(): void {\n    // Retrieves all passwords from the password service\n    this.passwordService.getAllPasswords()\n      .subscribe(passwords => this.passwords = passwords);\n  }\n\n  deletePassword(password: Password): void {\n    if (confirm('Are you sure you want to delete this password?')) {\n      // Removes the password from the list\n      this.passwords = this.passwords.filter(p => p !== password);\n      // Calls the password service to delete the password\n      this.passwordService.deletePassword(password.id).subscribe();\n    }\n  }\n\n  editPassword(password: Password): void {\n    const link = ['/edit', password.id]; // Constructs the router link for editing the password\n    this.router.navigate(link); // Navigates to the password edit page\n  }\n}\n//Comment explanations:\n\n//The code represents a TypeScript component for managing passwords.\n//It imports necessary dependencies from Angular core and custom files.\n//The component class is defined with the necessary properties and methods.\n//The constructor injects the required dependencies for the component.\n//The ngOnInit() method is called when the component is initialized and retrieves the passwords by calling getPasswords().\n//The getPasswords() method fetches all passwords from the password service and assigns them to the passwords property.\n//The deletePassword() method is called when a password needs to be deleted. It removes the password from the list and calls the password service to delete it.\n//The editPassword() method is called when a password needs to be edited. It constructs the router link for editing the password and navigates to the password edit page using the Router service.\n//Overall, this code manages the retrieval, deletion, and editing of passwords in the password manager component.\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}