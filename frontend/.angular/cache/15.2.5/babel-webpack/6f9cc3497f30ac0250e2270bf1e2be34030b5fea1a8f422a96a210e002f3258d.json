{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PasswordService {\n  getPassword(id) {\n    throw new Error('Method not implemented.');\n  }\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/passwords'; // Represents the API endpoint for passwords\n  }\n\n  getAllPasswords() {\n    return this.http.get('/passwords'); // Retrieves all passwords from the API\n  }\n\n  getPasswordById(id) {\n    return this.http.get(`/password-edit/${id}`); // Retrieves a password by ID from the API\n  }\n\n  addPassword(password) {\n    return this.http.post(`/passwords-edit`, password); // Adds a new password to the API\n  }\n\n  updatePassword(id, password) {\n    return this.http.put(`/passwords-edit/${id}`, password); // Updates a password by ID in the API\n  }\n\n  deletePassword(id) {\n    return this.http.delete(`/passwords/${id}`); // Deletes a password by ID from the API\n  }\n}\n\nPasswordService.ɵfac = function PasswordService_Factory(t) {\n  return new (t || PasswordService)(i0.ɵɵinject(i1.HttpClient));\n};\nPasswordService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PasswordService,\n  factory: PasswordService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,eAAe;EAC1BC,WAAW,CAACC,EAAU;IACpB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAGAC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,iCAAiC,CAAC,CAAC;EAEZ;;EAExCC,eAAe;IACb,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAa,YAAY,CAAC,CAAC,CAAC;EAClD;;EAEAC,eAAe,CAACN,EAAU;IACxB,OAAO,IAAI,CAACG,IAAI,CAACE,GAAG,CAAW,kBAAkBL,EAAE,EAAE,CAAC,CAAC,CAAC;EAC1D;;EAEAO,WAAW,CAACC,QAAkB;IAC5B,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAC,iBAAiB,EAAED,QAAQ,CAAC,CAAC,CAAC;EACtD;;EAEAE,cAAc,CAACV,EAAU,EAAEQ,QAAkB;IAC3C,OAAO,IAAI,CAACL,IAAI,CAACQ,GAAG,CAAC,mBAAmBX,EAAE,EAAE,EAAEQ,QAAQ,CAAC,CAAC,CAAC;EAC3D;;EAEAI,cAAc,CAACZ,EAAU;IACvB,OAAO,IAAI,CAACG,IAAI,CAACU,MAAM,CAAC,cAAcb,EAAE,EAAE,CAAC,CAAC,CAAC;EAC/C;;;AA1BWF,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAgB,SAAfhB,eAAe;EAAAiB,YAFd;AAAM","names":["PasswordService","getPassword","id","Error","constructor","http","getAllPasswords","get","getPasswordById","addPassword","password","post","updatePassword","put","deletePassword","delete","factory","providedIn"],"sourceRoot":"","sources":["/Users/sofiekalthof/Uni/Master/SoSe2023/AWT/AWT_MEANStack_HandsOnProject/password-manager/frontend/src/app/password-store.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Password } from './password.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PasswordService {\n  getPassword(id: number) {\n    throw new Error('Method not implemented.');\n  }\n  private apiUrl = 'http://localhost:3000/passwords'; // Represents the API endpoint for passwords\n\n  constructor(private http: HttpClient) { }\n\n  getAllPasswords(): Observable<Password[]> {\n    return this.http.get<Password[]>('/passwords'); // Retrieves all passwords from the API\n  }\n\n  getPasswordById(id: string): Observable<Password> {\n    return this.http.get<Password>(`/password-edit/${id}`); // Retrieves a password by ID from the API\n  }\n\n  addPassword(password: Password): Observable<any> {\n    return this.http.post(`/passwords-edit`, password); // Adds a new password to the API\n  }\n\n  updatePassword(id: string, password: Password): Observable<any> {\n    return this.http.put(`/passwords-edit/${id}`, password); // Updates a password by ID in the API\n  }\n\n  deletePassword(id: string): Observable<any> {\n    return this.http.delete(`/passwords/${id}`); // Deletes a password by ID from the API\n  }\n}\n// Comment explanations:\n// The code represents a service for managing passwords.\n// It imports necessary dependencies from Angular core, including HttpClient and Observable.\n// The @Injectable decorator allows the service to be injected as a dependency.\n// The apiUrl variable represents the base URL for the passwords API endpoint.\n// The constructor injects the HttpClient service for making HTTP requests.\n// The getAllPasswords() method retrieves all passwords from the API.\n// The getPasswordById() method retrieves a password by its ID from the API.\n// The addPassword() method adds a new password to the API.\n// The updatePassword() method updates an existing password in the API.\n// The deletePassword() method deletes a password by its ID from the API.\n// The getPassword() method is not implemented and throws an error.\n// Overall, this code provides methods to interact with the passwords API for CRUD operations."]},"metadata":{},"sourceType":"module","externalDependencies":[]}